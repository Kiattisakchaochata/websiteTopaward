import prisma from '../config/prisma.config.js';
import cloudinary from '../config/cloudinary.config.js';
import fs from 'fs/promises';

// ‚úÖ CREATE: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞ cover)
export const createStore = async (req, res, next) => {
  try {
    const {
      name,
      description = '',
      address = '',
      category_id,
      social_links = '',
      order_number,
      expired_at, // ‚úÖ ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å req.body
    } = req.body;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ã‡πâ‡∏≥
    const existing = await prisma.store.findFirst({
      where: {
        category_id,
        order_number: Number(order_number),
      },
    });

    if (existing) {
      return res.status(400).json({
        message: `‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà ${order_number} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà`,
      });
    }

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î cover image
    let coverImageUrl = null;
    if (req.files?.cover?.length > 0) {
      const coverResult = await cloudinary.uploader.upload(req.files.cover[0].path, {
        folder: 'store-covers',
      });
      coverImageUrl = coverResult.secure_url;
      await fs.unlink(req.files.cover[0].path);
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏° expired_at ‡πÅ‡∏•‡∏∞ is_active
    const store = await prisma.store.create({
      data: {
        name,
        description,
        address,
        social_links,
        category_id,
        order_number: Number(order_number),
        cover_image: coverImageUrl,
        expired_at: expired_at ? new Date(expired_at) : null, // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Date
        is_active: true,
      },
    });

    // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    let orders = [];
    if (req.body.orders) {
      if (Array.isArray(req.body.orders)) {
        orders = req.body.orders.map((o) => Number(o));
      } else {
        const single = Number(req.body.orders);
        if (!isNaN(single)) orders = [single];
      }
    }

    const uploadedImages = await Promise.all(
      (req.files?.images || []).map(async (file, index) => {
        const result = await cloudinary.uploader.upload(file.path, {
          folder: 'store-images',
        });
        await fs.unlink(file.path);

        const order = orders[index] || index + 1;
        return {
          image_url: result.secure_url,
          order_number: order,
          alt_text: `‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${order}`,
        };
      })
    );

    if (uploadedImages.length > 0) {
      await prisma.store.update({
        where: { id: store.id },
        data: {
          images: {
            create: uploadedImages,
          },
        },
      });
    }

    const storeWithImages = await prisma.store.findUnique({
      where: { id: store.id },
      include: { images: true },
    });

    res.status(201).json({
      message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ',
      store: storeWithImages,
    });
  } catch (err) {
    console.error("üî• CREATE STORE ERROR:", err);
    next(err);
  }
};

// ‚úÖ READ: ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const getAllStores = async (req, res, next) => {
  try {
    const stores = await prisma.store.findMany({
      orderBy: { created_at: 'desc' },
      select: {
    id: true,
    name: true,
    address: true,
    description: true,
    social_links: true,
    category_id: true,
    is_active: true,
    order_number: true,
    created_at: true,
    updated_at: true,
    cover_image: true, // ‚úÖ ‚úÖ ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏∏‡∏î
    category: true,
    images: true,
    reviews: true,
    visitorCounter: true,
  },
    });
    res.json({ stores });
  } catch (err) {
    next(err);
  }
};

// ‚úÖ READ: ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
export const getStoreById = async (req, res, next) => {
  try {
    const { id } = req.params;
    const store = await prisma.store.findUnique({
      where: { id },
      select: {
        id: true,
        name: true,
        address: true,
        description: true,
        social_links: true,
        category_id: true,
        order_number: true,
        cover_image: true, 
        created_at: true,
        updated_at: true,
        is_active: true,
        category: true,
        images: true,
        reviews: {
          include: {
            user: { select: { id: true, name: true } }
          }
        },
        visitorCounter: true,
      },
    });
    if (!store) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ' });
    res.json(store);
  } catch (err) {
    next(err);
  }
};


// ‚úÖ UPDATE
export const updateStore = async (req, res, next) => {
  try {
    const { id } = req.params;
    const {
      name = '',
      description = '',
      address = '',
      social_links = '',
      category_id = '',
      existing_image_orders = [],
    } = req.body;

    const categoryExists = await prisma.category.findUnique({ where: { id: category_id } });
    if (!categoryExists) return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö category ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏' });

    const parsedOrders = Array.isArray(existing_image_orders)
      ? existing_image_orders.map((o) => JSON.parse(o))
      : [JSON.parse(existing_image_orders)];

    const uniqueOrderNumbers = new Set(parsedOrders.map((o) => `${o.order_number}`));
    if (uniqueOrderNumbers.size !== parsedOrders.length) {
      return res.status(400).json({ message: '‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' });
    }

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î cover image ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏´‡∏°‡πà
    let coverImageUrl = null;
    if (req.files?.cover?.length > 0) {
      const result = await cloudinary.uploader.upload(req.files.cover[0].path, {
        folder: 'store-covers',
      });
      coverImageUrl = result.secure_url;
      await fs.unlink(req.files.cover[0].path);
    }

    await prisma.$transaction(async (tx) => {
      for (const { id: imageId } of parsedOrders) {
        await tx.image.update({
          where: { id: imageId },
          data: { order_number: -(Math.floor(Math.random() * 10000 + 1)) },
        });
      }

      for (const { id: imageId, order_number } of parsedOrders) {
        await tx.image.update({
          where: { id: imageId },
          data: { order_number: Number(order_number) },
        });
      }

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡πâ‡∏≤‡∏ô + cover_image ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      await tx.store.update({
        where: { id },
        data: {
          name,
          description,
          address,
          social_links,
          category_id,
          ...(coverImageUrl && { cover_image: coverImageUrl }), // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà overwrite ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
        },
      });
    });

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°
    if (req.files?.images?.length > 0) {
      const maxOrder = await prisma.image.aggregate({
        where: { store_id: id },
        _max: { order_number: true },
      });

      let nextOrder = (maxOrder._max.order_number || 0) + 1;

      const newImages = await Promise.all(
        req.files.images.map(async (file, index) => {
          const result = await cloudinary.uploader.upload(file.path, {
            folder: 'store-images',
          });
          await fs.unlink(file.path);
          return {
            image_url: result.secure_url,
            order_number: nextOrder++,
            alt_text: '‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà',
          };
        })
      );

      await prisma.store.update({
        where: { id },
        data: {
          images: { create: newImages },
        },
      });
    }

    const updatedStore = await prisma.store.findUnique({
      where: { id },
      include: { images: true },
    });

    res.json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', store: updatedStore });
  } catch (err) {
    next(err);
  }
};

// ‚úÖ DELETE
export const deleteStore = async (req, res, next) => {
  try {
    const { id } = req.params;
    await prisma.store.delete({ where: { id } });
    res.json({ message: '‡∏•‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    next(err);
  }
};

// ‚úÖ UPLOAD IMAGE (‡πÅ‡∏¢‡∏Å)
export const uploadImages = async (req, res, next) => {
  try {
    const { id } = req.params;
    const files = req.files;
    if (!files?.length)
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ' });

    const images = await Promise.all(
      files.map(async (file, index) => {
        const result = await cloudinary.uploader.upload(file.path, {
          folder: 'store-images',
        });
        await fs.unlink(file.path);
        return {
          image_url: result.secure_url,
          order_number: index + 1,
          alt_text: `‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà ${index + 1}`,
        };
      })
    );

    const updated = await prisma.store.update({
      where: { id },
      data: {
        images: { create: images },
      },
      include: { images: true },
    });

    res.json({
      message: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      images: updated.images,
      store: updated,
    });
  } catch (err) {
    next(err);
  }
};

// ‚úÖ SEARCH
// ‚úÖ controllers/store.controller.js

export const searchStore = async (req, res, next) => {
  try {
    let { q } = req.query;
    if (!q) return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ?q=‡∏≠‡∏≤‡∏´‡∏≤‡∏£' });

    q = q.trim().toLowerCase();

    const stores = await prisma.store.findMany({
      include: {
        category: true,
        images: true,
        reviews: true,
      },
      orderBy: { created_at: 'desc' },
    });

    // ‚úÖ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÇ‡∏î‡∏¢‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô, ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    const filtered = stores.filter((store) => {
      const nameMatch = store.name?.toLowerCase().includes(q);
      const descMatch = store.description?.toLowerCase().includes(q);
      const categoryMatch = store.category?.name?.toLowerCase().includes(q);
      return nameMatch || descMatch || categoryMatch;
    });

    res.json({ stores: filtered });
  } catch (err) {
    next(err);
  }
};

// ‚úÖ DELETE IMAGE
export const deleteStoreImage = async (req, res, next) => {
  try {
    const { imageId } = req.params;
    const image = await prisma.image.findUnique({ where: { id: imageId } });
    if (!image) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });

    const urlParts = image.image_url.split('/');
    const publicId = urlParts.slice(-2).join('/').replace(/\.[^/.]+$/, '');
    await cloudinary.uploader.destroy(publicId);

    await prisma.image.delete({ where: { id: imageId } });
    res.json({ message: '‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    next(err);
  }
};

// ‚úÖ UPDATE STORE ORDER
export const updateStoreOrder = async (req, res, next) => {
  try {
    const { id } = req.params;
    const { category_id, order_number } = req.body;

    if (!category_id || order_number === undefined || order_number === null) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ category_id ‡πÅ‡∏•‡∏∞ order_number' });
    }

    const store = await prisma.store.findUnique({ where: { id } });
    if (!store) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ' });

    const targetStore = await prisma.store.findFirst({
      where: {
        category_id,
        order_number: Number(order_number),
        id: { not: id },
      },
    });

    await prisma.$transaction(async (tx) => {
      if (targetStore) {
        // ‚úÖ 1) ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ temp (-1) ‡πÉ‡∏´‡πâ targetStore ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á unique constraint
        await tx.store.update({
          where: { id: targetStore.id },
          data: { order_number: -1 },
        });
      }

      // ‚úÖ 2) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ order ‡πÉ‡∏´‡∏°‡πà
      await tx.store.update({
        where: { id },
        data: {
          order_number: Number(order_number),
        },
      });

      if (targetStore) {
        // ‚úÖ 3) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï targetStore ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ order ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ
        await tx.store.update({
          where: { id: targetStore.id },
          data: {
            order_number: store.order_number,
          },
        });
      }
    });

    res.json({ message: '‡∏™‡∏•‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' });
  } catch (err) {
    console.error("üî• updateStoreOrder error:", err);
    if (err.code === 'P2002') {
      return res.status(400).json({
        message: '‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà',
      });
    }
    next(err);
  }
};
// ‚úÖ Popular Stores
export const getPopularStores = async (req, res, next) => {
  try {
    const stores = await prisma.store.findMany({
      include: {
        category: true,
        images: true,
        reviews: true,
      }
    })

    const withAvgRating = stores
      .map((store) => {
        const total = store.reviews.length
        const avg = total > 0 ? store.reviews.reduce((sum, r) => sum + r.rating, 0) / total : 0
        return { ...store, avg_rating: avg }
      })
      .filter((store) => store.avg_rating >= 5)
      .sort((a, b) => b.avg_rating - a.avg_rating)

    res.json({ stores: withAvgRating })
  } catch (err) {
    next(err)
  }
}
export const updateStoreCover = async (req, res, next) => {
  try {
    const { id } = req.params;

    if (!req.file) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏Å‡πÉ‡∏´‡∏°‡πà" });
    }

    // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudinary
    const result = await cloudinary.uploader.upload(req.file.path, {
      folder: "store-covers",
    });

    // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    await fs.unlink(req.file.path);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï cover_image ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const updated = await prisma.store.update({
      where: { id },
      data: {
        cover_image: result.secure_url,
      },
    });

    res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", store: updated });
  } catch (err) {
    console.error("üî• updateStoreCover error:", err);
    next(err);
  }
};

export const getExpiringSoonStores = async (req, res, next) => {
  try {
    const now = new Date();
    const next30Days = new Date();
    next30Days.setDate(now.getDate() + 30);

    const expiringStores = await prisma.store.findMany({
      where: {
        expired_at: {
          gte: now,
          lte: next30Days,
        },
        is_active: true,
      },
      select: {
        id: true,
        name: true,
        expired_at: true,
        category: { select: { name: true } },
      },
    });

    res.json({ stores: expiringStores });
  } catch (err) {
    next(err);
  }
};
// ‚úÖ Reactivate Expired Store
export const reactivateStore = async (req, res, next) => {
  try {
    const { id } = req.params;
    const { new_expired_at } = req.body;

    if (!new_expired_at) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏´‡∏°‡πà" });
    }

    const store = await prisma.store.findUnique({ where: { id } });
    if (!store) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ" });

    const updated = await prisma.store.update({
      where: { id },
      data: {
        is_active: true,
        expired_at: new Date(new_expired_at),
      },
    });

    res.json({ message: "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", store: updated });
  } catch (err) {
    next(err);
  }
};
export const getExpiredStores = async (req, res, next) => {
  try {
    const now = new Date();
    const expiredStores = await prisma.store.findMany({
      where: {
        expired_at: {
          lte: now,
        },
        is_active: false,
      },
      select: {
        id: true,
        name: true,
        expired_at: true,
        category: { select: { name: true } },
      },
    });

    res.json({ stores: expiredStores });
  } catch (err) {
    next(err);
  }
};