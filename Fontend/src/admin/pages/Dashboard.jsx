import { useEffect, useState } from "react";
import axiosInstance from "../../config/axiosInstance";
import { toast } from "react-toastify";
import Swal from "sweetalert2";
import {
  User,
  Layers,
  Store,
  Eye,
  AlertTriangle,
} from "lucide-react";

const Dashboard = () => {
  const [stats, setStats] = useState({
    users: 0,
    categories: 0,
    stores: 0,
    totalVisitors: 0,
    storeVisitors: [],
  });

  const [expiringStores, setExpiringStores] = useState([]);
  const [expiredStores, setExpiredStores] = useState([]);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const [
          usersRes,
          categoriesRes,
          storesRes,
          visitorRes,
          expiringRes,
          expiredRes,
        ] = await Promise.all([
          axiosInstance.get("/users"),
          axiosInstance.get("/categories"),
          axiosInstance.get("/stores"),
          axiosInstance.get("/visitor/stats"),
          axiosInstance.get("/admin/stores/expiring-soon"),
          axiosInstance.get("/admin/stores/expired"),
        ]);

        console.log("‚úÖ Expiring:", expiringRes.data);
        console.log("‚úÖ Expired:", expiredRes.data);

        setStats({
          users: usersRes.data.length,
          categories: categoriesRes.data.length,
          stores: storesRes.data.stores.length,
          totalVisitors: visitorRes.data.totalVisitors,
          storeVisitors: visitorRes.data.perStore,
        });

        setExpiringStores(expiringRes.data.stores); // <-- ‡∏ï‡∏£‡∏ß‡∏à‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô .stores ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
        setExpiredStores(expiredRes.data.stores);
      } catch (err) {
        console.error("Error fetching admin stats:", err);
        toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", {
  toastId: "load-error", // üí° ‡πÉ‡∏™‡πà ID ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ã‡πâ‡∏≥
});
      }
    };

    fetchStats();
  }, []);

  const handleReactivate = async (store) => {
  const { value: option } = await Swal.fire({
    title: `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡πâ‡∏≤‡∏ô ${store.name}`,
    input: 'select',
    inputOptions: {
      '365': '1 ‡∏õ‡∏µ',
      '730': '2 ‡∏õ‡∏µ',
      '1095': '3 ‡∏õ‡∏µ',
      'lifetime': '‡∏ï‡∏•‡∏≠‡∏î‡∏ä‡∏µ‡∏û',
    },
    inputPlaceholder: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤',
    showCancelButton: true,
    confirmButtonText: "‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏",
    cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
  });

  if (!option) return;

  try {
    let newExpiredDate;

    if (option === 'lifetime') {
      // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡πà‡∏≤‡∏á‡πÑ‡∏õ 100 ‡∏õ‡∏µ
      newExpiredDate = new Date();
      newExpiredDate.setFullYear(newExpiredDate.getFullYear() + 100);
    } else {
      newExpiredDate = new Date();
      newExpiredDate.setDate(newExpiredDate.getDate() + parseInt(option));
    }

    const res = await axiosInstance.patch(
      `/admin/stores/${store.id}/reactivate`,
      { new_expired_at: newExpiredDate.toISOString() }
    );

    toast.success(res.data.message || "‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

    // ‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å list
    setExpiringStores((prev) => prev.filter((s) => s.id !== store.id));
    setExpiredStores((prev) => prev.filter((s) => s.id !== store.id));
  } catch (err) {
    console.error("Reactivate error:", err.response?.data || err.message);
    toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏î‡πâ");
  }
};
const [loyaltyStats, setLoyaltyStats] = useState([]);

useEffect(() => {
  const fetchLoyaltyStats = async () => {
    try {
      const res = await axiosInstance.get("/admin/stores/loyalty");
      setLoyaltyStats(res.data.stores);
    } catch (err) {
      console.error("Loyalty Stats Error:", err);
    }
  };

  fetchLoyaltyStats();
}, []);

  const cardData = [
    { title: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", value: stats.users, icon: <User className="text-blue-500" size={28} /> },
    { title: "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", value: stats.categories, icon: <Layers className="text-yellow-500" size={28} /> },
    { title: "‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value: stats.stores, icon: <Store className="text-green-500" size={28} /> },
    { title: "‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value: stats.totalVisitors, icon: <Eye className="text-purple-500" size={28} /> },
  ];

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-6">‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</h2>

      {/* ‚úÖ Summary Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-10">
        {cardData.map((card, idx) => (
          <div key={idx} className="bg-white p-6 rounded-xl shadow flex items-center gap-4">
            <div className="p-3 bg-gray-100 rounded-full">{card.icon}</div>
            <div>
              <p className="text-2xl font-bold">{card.value}</p>
              <p className="text-gray-600">{card.title}</p>
            </div>
          </div>
        ))}
      </div>

      {/* ‚úÖ ‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ */}
      {expiringStores.length > 0 && (
        <div className="bg-white p-6 rounded-xl shadow mb-10 border border-yellow-300">
          <div className="flex items-center gap-2 mb-4">
            <AlertTriangle className="text-yellow-500" />
            <h3 className="text-xl font-semibold text-yellow-700">‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (30 ‡∏ß‡∏±‡∏ô)</h3>
          </div>
          <table className="w-full text-left border text-sm">
            <thead className="bg-gray-100">
              <tr>
                <th className="p-3 border">‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô</th>
                <th className="p-3 border">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
                <th className="p-3 border">‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</th>
                <th className="p-3 border text-center">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>
            <tbody>
              {expiringStores.map((store) => (
                <tr key={store.id}>
                  <td className="p-3 border">{store.name}</td>
                  <td className="p-3 border">{store.category?.name}</td>
                  <td className="p-3 border">{new Date(store.expired_at).toLocaleDateString()}</td>
                  <td className="p-3 border text-center">
                    <button
                      className="px-4 py-1 bg-green-500 text-white rounded hover:bg-green-600"
                      onClick={() => handleReactivate(store)}
                    >
                      ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* ‚úÖ ‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß */}
      {expiredStores.length > 0 && (
        <div className="bg-white p-6 rounded-xl shadow mb-10 border border-gray-300">
          <h3 className="text-xl font-semibold mb-4 text-gray-600">‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß</h3>
          <table className="w-full text-left border text-sm">
            <thead className="bg-gray-100">
              <tr>
                <th className="p-3 border">‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô</th>
                <th className="p-3 border">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
                <th className="p-3 border">‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</th>
                <th className="p-3 border text-center">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>
            <tbody>
              {expiredStores.map((store) => (
                <tr key={store.id}>
                  <td className="p-3 border">{store.name}</td>
                  <td className="p-3 border">{store.category?.name}</td>
                  <td className="p-3 border">{new Date(store.expired_at).toLocaleDateString()}</td>
                  <td className="p-3 border text-center">
                    <button
                      className="px-4 py-1 bg-green-500 text-white rounded hover:bg-green-600"
                      onClick={() => handleReactivate(store)}
                    >
                      ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* ‚úÖ ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô */}
      <div className="bg-white p-6 rounded-xl shadow">
        <h3 className="text-xl font-semibold mb-4">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô</h3>
        <table className="w-full text-left border text-sm">
          <thead className="bg-gray-100">
            <tr>
              <th className="p-3 border">‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô</th>
              <th className="p-3 border text-right">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°</th>
            </tr>
          </thead>
          <tbody>
            {stats.storeVisitors
              .filter((item) => item.store?.name) // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠
              .map((item, index) => (
                <tr key={`visitor-${item.storeId || index}`}>
                  <td className="p-3 border">{item.store.name}</td>
                  <td className="p-3 border text-right">{item.total}</td>
                </tr>
              ))}
          </tbody>
        </table>
      </div>
{/* ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ */}
{loyaltyStats.length > 0 && (
  <div className="bg-white p-6 rounded-xl shadow mt-10">
    <h3 className="text-xl font-semibold mb-4 text-gray-700">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
    <table className="w-full text-left border text-sm">
      <thead className="bg-gray-100">
        <tr>
          <th className="p-3 border">‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô</th>
          <th className="p-3 border">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£</th>
          <th className="p-3 border text-center">‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß</th>
          <th className="p-3 border text-center">‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß</th>
        </tr>
      </thead>
      <tbody>
  {loyaltyStats.map((store) => (
    <tr key={store.id}>
      <td className="p-3 border">{store.name}</td>
      <td className="p-3 border">{new Date(store.created_at).toLocaleDateString()}</td>
      <td className="p-3 border text-center">{store.renewal_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</td>
      <td className="p-3 border text-center">{Math.floor(store.years_with_us)} ‡∏õ‡∏µ</td>
      <td className="p-3 border text-center">
        {(() => {
          const years = store.years_with_us;
          const months = Math.round((store.years_with_us % 1) * 12);
          return `${Math.floor(years)} ‡∏õ‡∏µ${months > 0 ? ` ${months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô` : ""}`;
        })()}
      </td>
    </tr>
  ))}
</tbody>
    </table>
  </div>
)}
    </div>
  );
};

export default Dashboard;